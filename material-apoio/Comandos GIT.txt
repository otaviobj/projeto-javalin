git remote add origin https://github.com/try-git/try_git.git

COMANDOS GIT

Inicia um repositório git (executar o comando abaixo na raiz do projeto)
git init

Criar um arquivo
touch nome_do_arquivo
Exemplo: README.md

Criar um arquivo gitignore (executar o comando na raiz do projeto)
touch .gitignore

Editar um arquivo gitignore
Na raiz do projeto
editor .gitignore
Exemplo 1: vi .gitignore
Exemplo 2: nano .gitignore
Exemplo 3: navegar até o diretório onde se encontra o arquivo (raíz do projeto) e abrir com outro editor. Exemplo: notepad++ ou notepad.

Observações: o arquivo ".gitignore" pode conter diversos arquivos que não serão rastreados (tracked) e portanto não deverão estar presentes no repositório
remoto do projeto. Alguns exemplos: arquivos específicos da ferramenta de desenvolvimento como Eclipse, Netbeans, Intellij e etc. Afinal, as configurações
da IDE de sua preferência é algo pessoal e que não deve impactar na execução do projeto. Portanto, se o Dev1 utiliza o Eclipse e o Dev2 utiliza o Intellij
não faz diferença. Esses arquivos não devem estar no projeto.
Por exemplo 1: dentro do '.gitignore' adicioanar a seguinte linha: .idea/*
Assim todos arquivos do Intellij não estarão presentes quando for realizado o commit.

Exibe o status do git
git status

Exibe o log
git log
git log --pretty=oneline

Exibe o log resumido
git shortlog

Exibe um log que ainda não sei oque é.
git reflog

Mostra a diferença da qual você está prestes a fazer commit.
git diff --staged

Listar os repositórios remotos
git remote -v

Clonar um repositório (SSH ou HTTPS)
git clone git@domain:username/repository.git
Exemplo1: git clone https://github.com/oliveiramclaraa/LP_II_Trabalho.git
Exemplo2: git clone git@github.com:oliveiramclaraa/LP_II_Trabalho.git

Editar a url do repositório remoto (SSH ou HTTPS)
git remote set-url origin git@domain:username/repository.git
Exemplo 1: git remote set-url origin https://github.com/oliveiramclaraa/LP_II_Trabalho.git
Exemplo 2: git remote set-url origin git@github.com:oliveiramclaraa/LP_II_Trabalho.git

Adicionar a url do repositório remoto ao projeto criado localmente.
Quando é necessário? Quando você cria um projeto remoto vazio, e localmente você criou um projeto já estruturado. Por exemplo, um projeto Maven.
Então se você quer que o seu projeto local aponte para o endereço do repositório remoto do projeto recém criado, você digita:
Exemplo: git remote add origin https://github.com/usuario-qualquer/repositorio-qualquer.git

Adicionando arquivos a área de Stage (arquivos prontos para serem comitados).
Adicionar todos arquivos modificados a área de Stage
Exemplo 1: git add .

Adicionar todos os arquivos modificados de uma terminada extensão.
Exemplo 2: git add *.java

Adicionar um arquivo especifico a área de Stage
git add nome_do_arquivo
Exemplo 3: git add .gitignore

Comitando as alterações realizadas no projeto local.
Obs.: Lembrando que antes de fazer o commit é necessário que você adicione os arquivos que você deseja que sejam comitados a uma área denominada Stage.

git commit -m "Meu primeiro commit."
Onde o parâmetro "-m" indica que você deve fornecer uma descrição para o comit que esta sendo feito.
Importante: evite commits com nomes que não descritivos. Por exemplo: git commit -m "Atualização" Mas atualização de que?
Nomes de commits que descrevem o que foi feito ajuda o time de desenvolvimento a indentificar o que foi feito em um determinado commit.

Exemplo 1: git commit -am "Criação do Controlador 'FuncionarioController'".
Exemplo 2: git commit -m "Configuração do banco de dados em memória (H2)."
Exemolo 3: git commit -m "Correção da método buscarPagina da classe de serviço 'ClienteService'.".
Fez uma pequena melhoria (significativa) no código? Funciona? Então, faça um commit.

Rastrear as branchs remotas
git fetch -a

Rastrear as branchs locais
git branch -a

Exibir as branchs remotas
git branch -r

Exibir as branchs locais (apenas)
git branch

Criar uma nova branch
git branch nome_da_branch_criada
Exemplo: git branch developer

Trocar de branch
git checkout nome_da_branch_que se deseja mudar.
Exemplo: suponha que existem duas branchs: master e developer
Suponha você esteja na branch master
Para ir para branch developer
git checkout developer

Cria e move para uma nova branch
git checkout -b nova_branch

Resetando um commit
git reset --hard commit
Exemplo: git reset --hard cedc856

Para voltar ao um determinado número de commits atrás.
git reset --hard HEAD~numero_de_commits_deletados
Exemplo: git reset --hard HEAD~1

git reset --soft HEAD~numero_de_commits_deletados
Exemplo: git reset --soft HEAD~2

Forçar um commit (sobrepoe os commits atuais)
git push --force origin master
Obs.: evitar esse comando a menos que seja realmente necessário.

Pesquisar e entender melhor esse comando.
git cherry-pick nome_commit

Pesquisar e entender melhor esse comando.
git revert --strategy resolve <commit>

Limpar o cache
git rm -r --cached .
git add .
git commit -m "fixed untracked files" 

Limpar o cache de arquivos específicos
git rm -r --cached diretorio/arquivo
Exemplo: git rm -r --cached superlists/__pycache__

OPCIONAL - CRIAÇÃO DE ALIAS (APELIDOS) PARA OS PRINCIPAIS COMANDOS NO GIT e também no terminal BASH (vale a pena experimentar. É útil).

Observações: a criação de alias pode ser muito útil, especialmente quando um determinado comando é executado diversas vezes. Por exemplo:
git status
Crie um alias para o comando git status. Assim: alias gs="git status"
Onde gs é o nome do apelido para o seu comando. Da próxima vez que quiser saber o status dos arquivos, basta digitar gs.
Claro, desde que seja um alias permanente (criado no arquivo .bash.bashrc localizado no diretório /etc. Caso contrário será apenas um aliás temporário.

Criação de Alias (Apelido de Comando) para envio do projeto para branch master
alias mmaster="git push -u origin master"

Criaçaõ de Alias

Criação de Alias para baixar as atualizações para o projeto local
alias ppull="git pull"

Mostrar um log customizado
$ git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

Alternativas para alias no Git
$ git config --global alias.logline "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
$ git logline

alias logline="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias llog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

Criar alias para Limpar a tela do terminal
alias cls="clear"

Criar alias para exibir o histórico de comandos digitados no terminal
alias h="history"

Cria um alias para navegar para uma pasta específica no seu sistema
Exemplo: alias documentos="cd /c/Users/robson/Documments"
Agora para navegar até a pasta Documments, basta digitar o alias documentos no terminal. :)

Ah! Mas se eu criar um alias e não lembrar o node dos alias que criei?
Crie um alias para printar na tela do terminal o arquivo onde foi criado os alias permanentes.
Exemplo: alias printar="cat /etc/bash.bashrc"

Utilize sua criatividade para criar alias que facilite tarefas repetidas










